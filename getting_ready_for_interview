Подготовка к собеседованию
Методологии разработки и место QA в этом процессе
- [ ]  методологии разработки
- [ ]  этапы тестирования ПО:
    - [ ]  в каких этапах вступает тестировщик
    - [ ]  что такое shift-left testing
    - [ ]  принимаете ли вы участие в тестировании требований
- [ ]  критерии начала и окончания процесса тестирования, готовность задачи к тестированию

**Теория тестирования**

- [ ]  QA, QC, тестирование
- [ ]  качество и какие бывают критерии качества
- [ ]  верификации и валидация
- [ ]  виды тестирования

**Тест-дизайн**

- [ ]  техники тест-дизайна
    - [ ]  классы эквивалентности
    - [ ]  проверка граничных значений
    - [ ]  таблица принятия решений
    - [ ]  pairwise
    - [ ]  диаграммы изменения состояний
    - [ ]  прочие
- [ ]  в каких случаях применять ту или иную технику
- [ ]  задача на тест-дизайн: например, создайте список проверок на данное поле
- [ ] практика pair-wise https://habr.com/ru/companies/otus/articles/592575/
- [ ]  тестовая документация
    - [ ]  виды тестовой документации
    - [ ]  содержание полей
    - [ ]  отличие тест-кейса от чек-листа
    - [ ]  баг-репорт: жизненный цикл, критичность и приоритет, назовите пример бага с высокой серьезностью, но низким приоритетом

**Специфика области: веб/мобилки/десктоп**

*(приведу примеры только для веб, так как прохожу и провожу собеседования в данном направлении)*

- [ ]  модели OSI и TCP/IP: что такое, из каких уровней состоят, популярные протоколы [https://ru.wikipedia.org/wiki/Сетевая_модель_OSI](https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_OSI)
- [ ]  клиент-серверная архитектура
- [ ]  HTTP: структура ,методы, коды ответов,идемпотенотность (Идемпотентными методами являются: GET, PUT, DELETE, HEAD и OPTIONS.)
- [ ]  разница HTTP/HTTPS
- [ ]  разница get/post, put/patch [https://ru.stackoverflow.com/questions/1057964/Чем-put-отличается-от-patch](https://ru.stackoverflow.com/questions/1057964/%D0%A7%D0%B5%D0%BC-put-%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B0%D0%B5%D1%82%D1%81%D1%8F-%D0%BE%D1%82-patch)
- [ ]  кэш и куки
- [ ]  разница между Идентификацией, Аутентификацией, Авторизацией https://it-uroki.ru/uroki/bezopasnost/identifikaciya-autentifikaciya-avtorizaciya.html
- [ ]  REST/SOAP/GraphQL/gRPC: разница, особенности тестирования
- [ ]  форматы данных: JSON, XML
- [ ]  AJAX
- [ ]  инструменты работы: cURL, devTools, Swagger, Postman/SoapUI/Insomnia (как у вас был практическая область применения)
- [ ]  монолиты vs микросервисы: что такое, в чем особенность тестирования
- [ ]  очереди, кафка, как это тестировать https://habr.com/ru/companies/slurm/articles/666326/

**Автоматизация**

- [ ]  автоматизация тестов
    - [ ]  когда необходимо начинать автоматизацию тестирования
    - [ ]  какие тесты не целесообразно автоматизировать,
- [ ]  как внедрять автоматизацию на проекте
- [ ]  что такое пирамида тестирования
- [ ]  что такое принцип трех А
- [ ]  ООП
    - [ ]  три (четыре) принципа
    - [ ]  вопросы по построению ООП и основных особенностях
    - [ ]  класс/объект
    - [ ]  разница перегрузки и переопределения
    - [ ]  абстрактный класс/интерфейс
- [ ]  база языка программирования
    - [ ]  типы данных
    - [ ]  основные конструкции языка
    - [ ]  популярные библиотеки
- [ ]  SOLID, KISS, DRY и прочее
- [ ]  работа с Selenium/selenide, локаторы XPATH/CSS и их написание
- [ ]  паттерны протектирования и автоматизации
- [ ]  flacky тесты: что такое, какие причины, как избавляться
- [ ]  TDD/BDD
- [ ]  решение алгоритмической задачи (сложность разная) Пример простой задачи: найти количество вхождений числа n в массив чисел

**CI/CD**

- [ ]  что это такое, зачем нужно
- [ ]  какие этапы выстраивания quality gate
- [ ]  внедрение и поддержка на проекте
- [ ]  особенности работы с инструментами
- [ ]  docker
    - [ ]  что такое контейнер
    - [ ]  состав docker
    - [ ]  основные сущности
    - [ ]  основные команды для Dockerfile

**База данных**

- [ ]  реляционные/нереляционные БД
- [ ]  виды связей между таблицами
- [ ]  первичный/внешний ключи
- [ ]  нормализация
- [ ]  основные операции и их синтаксис: create, select, intsert into, delete
- [ ]  подробный синтаксис select: join (виды и их отличия), where, group by, distinct
- [ ]  какая разница между LEFT, RIGHT, INNER, OUTER JOIN?
- [ ]  задача на join/group by

 **Локализация багов**: порядок действий при обнаружении бага

- [ ]  работа с логами: инструмент, подход к поиску логов, где они лежат
- [ ]  работа с БД: поиск созданной сущности
- [ ]  работа с devTools: как применяете для локализации
- [ ]  как понять: ошибка на стороне сервера или клиента

**Типичная задача:** Есть форма входа, которая состоит из логина и пароля. Ты вводишь корректные значения, нажимаешь на кнопку войти и ничего не происходит. Твои действия?

**Командная строка**

- [ ]  основные команды: ls / grep / cat / top / atop / free / lsof / netstat
- [ ]  перенаправление вызовов

**GIT**

- [ ]  основные понятия: репозиторий, индекс, коммит, указатели, ветка, рабочая копия.
- [ ]  **основные команды:** add, commit, status, diff, branch, checkout, reset, merge, pull, push
- [ ]  **специфические команды:** cherry-pick, stash, revert, rebase

**Популярные “опытные” вопросы**

- [ ]  Как тестировать продукт с большим количеством фичей, задач и сложным функционалом
- [ ]  Как убедиться, что тесты покрывают все необходимые сценарии
- [ ]  Что делать, если вам не хватает ресурса для выполнения задач в срок
- [ ]  Как вы гарантируете, что ваши автотесты расширяемы и легко поддерживаемые
- [ ]  Кто принимает решение, что все проверено и можно выпускаться?
- [ ]  как вы влияете на скорость исправление бага
- [ ]  Вот у нас новые фичи, 3 часа до окончания рабочего времени, надо все проверить - с чего начнешь?

Локализация бага - https://telegra.ph/Zadacha-na-lokalizaciyu-baga-01-07

[Тесты](https://www.notion.so/a0215d3411c542f5b4c7e401b9292b71?pvs=21)

Вопрос: почему в кафку сообщение о создании чего-то пришло позже сообщения об удалении этой сущности
Ответ: 

В Apache Kafka сообщения могут быть выложены в очередь обработки раньше, чем сообщения о создании объекта, из-за асинхронной природы системы. Это может произойти, например, когда процессы создания и удаления объектов выполняются параллельно или асинхронно.

В рамках асинхронной системы, какой является Kafka, порядок доставки сообщений не гарантирован. Если процесс удаления объекта был завершен раньше, чем процесс создания объекта, то сообщение об удалении будет отправлено и обработано раньше.

Это может создать некоторые вызовы в системах, которые зависят от строгого порядка сообщений, и потребует специальной обработки в приложениях, использующих Kafka.
